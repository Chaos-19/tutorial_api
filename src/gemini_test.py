import base64
import os
from google import genai
from google.genai import types


def generate(content_html):
    client = genai.Client(
        api_key="AIzaSyCX6u9wQD9W8CwiSYr1Gotm5qHrt62SAJY"
    )

    model ="gemini-2.5-flash-preview-04-17"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text=content_html),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        response_mime_type="text/plain",
        system_instruction=[
            types.Part.from_text(text="""You are a highly skilled developer and documentation expert. Your task is to convert the following HTML content into clean, professional-grade Markdown without modifying the original content in any way.

Do not alter, paraphrase, or reword the text content. Preserve all wording, phrasing, and structure as-is.

Convert HTML tags into their semantic Markdown equivalents:

Use # through ###### for <h1> to <h6>.

Convert <ul> and <ol> to bullet (-) or numbered (1.) lists.

Turn <strong>, <em>, <code>, and <a> tags into bold (**), italic (*), inline code (`), and link ([text](url)) syntax respectively.


Convert any code snippets into fenced code blocks with appropriate language tags.

Convert HTML tables into properly aligned Markdown tables.

Remove scripts, styles, and any non-content tags that are irrelevant to the Markdown format.

Maintain the structure, indentation, and readability of the content throughout.


Do not change the meaning, remove content, or improve wordingâ€”just perform a direct conversion.

Here is the HTML content:"""),
        ],
    )
    
    response_markdown = ""

    response_markdown = client.models.generate_content(
        model=model,
        contents=contents,
        config=generate_content_config)
        
    return response_markdown.text

if __name__ == "__main__":
    print(generate("\n<h2>Angular Pipes Syntax</h2>\n\n\n\n<p>The syntax of the pipe is as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Expression | pipeOperator&#91;:pipeArguments]</code></pre>\n\n\n\n<p>Where</p>\n\n\n\n<p><code>Expression</code>: is the expression, which you want to transform<br><code>|</code>&nbsp;: is the Pipe Character<br><code>pipeOperator</code>&nbsp;: name of the Pipe<br><code>pipeArguments</code>: arguments to the Pipe</p>\n\n\n\n<h2>Pipes Example</h2>\n\n\n\n<p>In this example let use Angular built in date pipe to transform the date</p>\n\n\n\n<h5>Component class</h5>\n\n\n\n<pre class=\"wp-block-code\"><code> \nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n \n@Component({\n    selector: 'app-root',\n    templateUrl: `&lt;p> Unformatted date : {{toDate }} &lt;/p>\n                  &lt;p> Formatted date : {{toDate | date}} &lt;/p>` \n}) \nexport class AppComponent \n{ \n    title: string = 'pipe Example' ; \n    toDate: Date = new Date(); \n}\n </code></pre>\n\n\n\n<p>n the above example, we are taking current date and transforming it into the easily readable format using the date pipe. We have included the unformatted date format for comparison. The output is as shown below</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2016/11/Angular-2-Pipes-Example.png\" alt=\"Angular Pipes Example\" class=\"wp-image-4915\"/><figcaption>Example of Angular Pipes</figcaption></figure>\n\n\n\n<h2>Passing arguments to pipes</h2>\n\n\n\n<p>We can also pass optional arguments to the pipe. The arguments are added to the pipe using acolon (<code>:</code>)&nbsp;sign followed by the&nbsp;value of the argument. If there are multiple arguments separate each of them with the colon (<code>:</code>).&nbsp;For example, we can pass the&nbsp;<code>format</code>&nbsp;as the argument to the&nbsp;<code>date</code>&nbsp;pipe, which is Optional. The&nbsp;<code>medium</code>&nbsp;is one of the valid value of the format argument, which displays the date in&nbsp;<code>yMMMdjms</code>&nbsp;format. The example code is as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{{toDate | date:'medium'}}</code></pre>\n\n\n\n<p>The parameter&nbsp;<code>medium</code>&nbsp;displays the date as&nbsp;<strong>Nov 22, 2016, 10:04:10 PM</strong></p>\n\n\n\n<h2>Chaining Pipes</h2>\n\n\n\n<p>Pipes can be chained together to make use of multiple pipes in one expression. For example in the following code, the&nbsp;<code>toDate</code>&nbsp;is passed to the&nbsp;<code>Date</code>&nbsp;Pipe. The output of the&nbsp;<code>Date</code>&nbsp;pipe is then passed to the&nbsp;<code>uppercase</code>&nbsp;pipe.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>toDate | date | uppercase</code></pre>\n\n\n\n<h2>The Angular Built-in pipes</h2>\n\n\n\n<p>The Angular has several built-in pipes, which you can use in your application. You can read about them from this&nbsp;link</p>\n\n\n\n<p>Some of the important pipes are&nbsp;<code>Date Pipe</code>,&nbsp;<code>Uppercase Pipe</code>,&nbsp;<code>Lowercase Pipe</code>,&nbsp;<code>Number Pipe</code>/&nbsp;<code>Decimal Pipe</code>,&nbsp;<code>Currency Pipe</code>, and&nbsp;<code>Percent Pipe</code><strong>,</strong>&nbsp;etc</p>\n\n\n\n<h3>DatePipe</h3>\n\n\n\n<p>The&nbsp;<code>Date pipe</code>&nbsp;formats the date according to locale rules. The syntax of the date pipe is as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>date_expression | date&#91;:format] </code></pre>\n\n\n\n<p>Where</p>\n\n\n\n<p><strong>date_expression</strong>&nbsp;is a date object or a number</p>\n\n\n\n<p><strong>date</strong>&nbsp;is the name of the pipe</p>\n\n\n\n<p><strong>format</strong>&nbsp;is the date and time format string which indicates the format in which date/time components are displayed.</p>\n\n\n\n<p>Some of the common format strings are</p>\n\n\n\n<figure id=\"tablepress-10\" class=\"wp-block-table\"><table><thead><tr><th>Component</th><th>format</th><th>Example</th></tr></thead><tbody><tr><td>Year</td><td>y</td><td>2016</td></tr><tr><td>Year</td><td>yy</td><td>16</td></tr><tr><td>Month</td><td>M</td><td>9</td></tr><tr><td>Month</td><td>M</td><td>99</td></tr><tr><td>Month</td><td>MMM</td><td>Nov</td></tr><tr><td>Month</td><td>MMMM</td><td>November</td></tr><tr><td>Day</td><td>d</td><td>9</td></tr><tr><td>Day</td><td>dd</td><td>09</td></tr><tr><td>hour</td><td>j</td><td>9</td></tr><tr><td>hour</td><td>jj</td><td>09</td></tr><tr><td>hour</td><td>h</td><td>9 AM</td></tr><tr><td>hour</td><td>hh</td><td>09 AM</td></tr><tr><td>hour24</td><td>H</td><td>13</td></tr><tr><td>hour24</td><td>HH</td><td>13</td></tr><tr><td>minute</td><td>m</td><td>9</td></tr><tr><td>minute</td><td>mm</td><td>09</td></tr><tr><td>second</td><td>s</td><td>9</td></tr><tr><td>second</td><td>ss</td><td>99</td></tr><tr><td>Time zone</td><td>z</td><td>Pacific Standard time</td></tr><tr><td>Time zone</td><td>Z</td><td>GMT-8:00</td></tr><tr><td>Time zone</td><td>a</td><td>PM</td></tr><tr><td>era</td><td>G</td><td>AD</td></tr><tr><td>era</td><td>GGGG</td><td>Anno Domini</td></tr></tbody></table></figure>\n\n\n\n<p>Format argument also supports some predefined commonly used formats</p>\n\n\n\n<figure id=\"tablepress-11\" class=\"wp-block-table\"><table><thead><tr><th>Format Name</th><th>Equivalent Format strng</th><th>Example<br>(for en-US)</th></tr></thead><tbody><tr><td>medium</td><td>yMMMdjms</td><td>Sep 3, 2010, 12:05:08 PM</td></tr><tr><td>short</td><td>yMdjm</td><td>9/3/2010, 12:05 PM</td></tr><tr><td>fullDate</td><td>yMMMMEEEEd</td><td>Friday, September 3, 2010</td></tr><tr><td>longDate</td><td>yMMMMd</td><td>September 3, 2010</td></tr><tr><td>mediumDate</td><td>yMMMd</td><td>Sep 3, 2010</td></tr><tr><td>shortDate</td><td>yMd</td><td>9/3/2010</td></tr><tr><td>mediumTime</td><td>jms</td><td>12:05:08 PM</td></tr><tr><td>shortTime</td><td>jm</td><td>12:05 PM</td></tr></tbody></table></figure>\n\n\n\n<p>You can read about the complete list from&nbsp;link</p>\n\n\n\n<h4>Example of Datepipe</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n@Component({\r\n    selector: 'app-root',\r\n    template:`&lt;p>medium : {{toDate | date:'medium'}} &lt;/p>\r\n              &lt;p>short : {{toDate | date:'short'}} &lt;/p>\r\n              &lt;p>fullDate : {{toDate | date:'fullDate'}} &lt;/p>\r\n              &lt;p>longDate : {{toDate | date:'longDate'}} &lt;/p>\r\n              &lt;p>mediumDate : {{toDate | date:'mediumDate'}} &lt;/p>\r\n              &lt;p>shortDate : {{toDate | date:'shortDate'}} &lt;/p>\r\n              &lt;p>mediumTime : {{toDate | date:'mediumTime'}} &lt;/p>\r\n              &lt;p>dd-MM-y : {{toDate | date:'dd-MM-y'}} &lt;/p>\r\n              &lt;p>dd-MM-yy HH:mm : {{toDate | date:'dd-MM-yy HH:mm'}} &lt;/p>`\r\n})\r\nexport class AppComponent\r\n{\r\n    title: string = 'Angular pipes Example' ;\r\n    toDate: Date = new Date();\r\n}</code></pre>\n\n\n\n<h3>UpperCasePipe &amp; LowerCasePipe</h3>\n\n\n\n<p>As the name suggests, these pipes transform the string to Uppercase or lowercase</p>\n\n\n\n<p>Read more about&nbsp;uppercasepipe&nbsp;&amp;&nbsp;lowercasepipe</p>\n\n\n\n<h3>SlicePipe</h3>\n\n\n\n<p>Creates a new List or String containing a subset (slice) of the string or array. This Pipe uses the JavaScript API&nbsp;Array.prototype.slice()&nbsp;and&nbsp;String.prototype.slice().</p>\n\n\n\n<h4>Syntax</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>array_or_string_expression | slice:start&#91;:end] </code></pre>\n\n\n\n<p>Where</p>\n\n\n\n<p><strong>array_or_string_expression</strong>&nbsp;is the string to slice</p>\n\n\n\n<p><strong>slice</strong>&nbsp;is the name of the pipe</p>\n\n\n\n<p><strong>start</strong>&nbsp;is the start position/index from where the slicing will start</p>\n\n\n\n<p><strong>end&nbsp;</strong>is the ending index/position in the array/string</p>\n\n\n\n<p>The slice pipes take&nbsp;two arguments. The first argument<strong>&nbsp;<em>start</em></strong>&nbsp;is the starting index of the string/array. The second argument&nbsp;<strong>end</strong>&nbsp;is the ending index of the string/array. If the start or end index is negative then the index is counted from end of the string/array</p>\n\n\n\n<h4>Example</h4>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n@Component({\r\n    selector: 'app-root',\r\n    template:`&lt;p>Complete String :{{msg}} &lt;/p>\r\n              &lt;p>Example 1 :{{msg | slice:11:20}} &lt;/p>\r\n              &lt;p>Example 2 :{{msg | slice:-9}} &lt;/p>`\r\n})\r\n \r\nexport class AppComponent\r\n{\r\n    title: string = 'Angular pipes Example' ;\r\n    msg: string= 'Welcome to Angular ';\r\n}</code></pre>\n\n\n\n<p>Both the above examples will display Angular. You can read more about slice from this&nbsp;link</p>\n\n\n\n<h3>DecimalPipe / NumberPipe</h3>\n\n\n\n<p>The Decimal Pipe is used to Format a number as Text. This pipe will format the number according to locale rules.</p>\n\n\n\n<h4>Syntax</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>number_expression | number&#91;:digitInfo] </code></pre>\n\n\n\n<p>Where</p>\n\n\n\n<p><strong>number_expression</strong>&nbsp;is the number you want to format</p>\n\n\n\n<p><strong>number</strong>&nbsp;is the name of the pipe</p>\n\n\n\n<p><strong>digitInfo</strong>&nbsp;is a string which has the following format</p>\n\n\n\n<p><em>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</em></p>\n\n\n\n<p>Where</p>\n\n\n\n<p><strong>minIntegerDigits</strong>&nbsp;is the minimum number of integer digits to use. Defaults to 1.</p>\n\n\n\n<p><strong>minFractionDigits</strong>&nbsp;is the minimum number of digits after fraction. Defaults to 0.</p>\n\n\n\n<p><strong>maxFractionDigits</strong>&nbsp;is the maximum number of digits after fraction. Defaults to 3.</p>\n\n\n\n<h4>Example</h4>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component } from '@angular/core';import { FormsModule } from '@angular/forms';@Component({    selector: 'app-root',    template: `&lt;p> Unformatted :{{num}}&lt;/p>               &lt;p> Formatted :{{num | number}}&lt;/p>               &lt;p> Formatted :{{num | number:'3.1-2'}}&lt;/p>               &lt;p> Formatted :{{num | number:'7.1-5'}} &lt;/p>`}) export class AppComponent{    title: string = 'Angular pipes Example' ;    num: number= 9542.14554;} import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n@Component({\r\n    selector: 'app-root',\r\n    template: `&lt;p> Unformatted :{{num}}&lt;/p>\r\n               &lt;p> Formatted :{{num | number}}&lt;/p>\r\n               &lt;p> Formatted :{{num | number:'3.1-2'}}&lt;/p>\r\n               &lt;p> Formatted :{{num | number:'7.1-5'}} &lt;/p>`\r\n})\r\n \r\nexport class AppComponent\r\n{\r\n    title: string = 'Angular pipes Example' ;\r\n    num: number= 9542.14554;\r\n} import { Component } from '@angular/core';import { FormsModule } from '@angular/forms';@Component({    selector: 'app-root',    template: `&lt;p> Unformatted :{{num}}&lt;/p>               &lt;p> Formatted :{{num | number}}&lt;/p>               &lt;p> Formatted :{{num | number:'3.1-2'}}&lt;/p>               &lt;p> Formatted :{{num | number:'7.1-5'}} &lt;/p>`}) export class AppComponent{    title: string = 'Angular pipes Example' ;    num: number= 9542.14554;} </code></pre>\n\n\n\n<h3>PercentePipe</h3>\n\n\n\n<p>Formats the given number as a percentage according to locale rules.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> number_expression | percent&#91;:digitInfo] </code></pre>\n\n\n\n<p>Where</p>\n\n\n\n<p><strong>number_expression</strong>&nbsp;is the number you want to format</p>\n\n\n\n<p><strong>percent</strong>&nbsp;is the name of the pipe</p>\n\n\n\n<p><strong>digitInfo</strong>&nbsp;is a string which has the following format. It is similar to used in decimal pipe</p>\n\n\n\n<h4>Example code</h4>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n \r\n@Component({\r\n    selector: 'app-root',\r\n    template:`&lt;p>Unformatted :{{per}} &lt;/p>\r\n              &lt;p>Example 1 :{{per | percent }} &lt;/p>\r\n              &lt;p>Example 2 :{{per | percent:'1.2-2'}} &lt;/p>`\r\n})\r\nexport class AppComponent\r\n{\r\n    title: string = 'Angular pipes Example' ;\r\n    per: number= .7414;2';\r\n}\r\n </code></pre>\n\n\n\n<p>More about Percent pipe from the&nbsp;link</p>\n\n\n\n<h3>CurrencyPipe</h3>\n\n\n\n<p>Formats a number as currency using locale rules.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> number_expression | currency&#91;:currencyCode&#91;:symbolDisplay&#91;:digitInfo]]] </code></pre>\n\n\n\n<p>Where</p>\n\n\n\n<p><strong>number_expression</strong>&nbsp;currency to format a number as currency.</p>\n\n\n\n<p><strong>Currency</strong>&nbsp;is the name of the pipe</p>\n\n\n\n<p><strong>currencyCode</strong>&nbsp;is the ISO 4217 currency code, such as USD for the US dollar and EUR for the euro.</p>\n\n\n\n<p><strong>symbolDisplay</strong>&nbsp;is a boolean indicating whether to use the currency symbol or code. Use true to display symbol and false to use code</p>\n\n\n\n<p><strong>digitInfo</strong>&nbsp;is similar to the one used in decimal pipe</p>\n\n\n\n<h4>Example</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nimport { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n@Component({\r\n    selector: 'app-root',\r\n    template: `&lt;p>Unformatted :{{cur}} &lt;/p>\r\n               &lt;p>Example 1 :{{cur | currency }} &lt;/p>\r\n               &lt;p>Example 2 :{{cur | currency:'INR':true:'4.2-2'}} &lt;/p>`\r\n})\r\n \r\nexport class AppComponent\r\n{\r\n    title: string = 'Angular pipes Example' ;\r\n    cur: number= 175;\r\n}</code></pre>\n\n\n\n<p></p>\n")) 
